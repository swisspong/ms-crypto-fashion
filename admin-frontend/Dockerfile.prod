# FROM node:18-alpine AS base

# # Install dependencies only when needed
# FROM base AS deps
# # Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
# RUN apk add --no-cache libc6-compat
# WORKDIR /app

# # Install dependencies based on the preferred package manager
# COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
# # RUN \
# #   if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
# #   elif [ -f package-lock.json ]; then npm ci; \
# #   elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i --frozen-lockfile; \
# #   else echo "Lockfile not found." && exit 1; \
# #   fi
# RUN npm install

# # RUN yarn add next
# # Rebuild the source code only when needed
# FROM base AS builder
# WORKDIR /app
# COPY --from=deps /app/node_modules ./node_modules
# COPY . .

# # Next.js collects completely anonymous telemetry data about general usage.
# # Learn more here: https://nextjs.org/telemetry
# # Uncomment the following line in case you want to disable telemetry during the build.
# # ENV NEXT_TELEMETRY_DISABLED 1
# RUN npm install next
# RUN npm run build

# # If using npm comment out above and use below instead
# # RUN npm run build

# # Production image, copy all the files and run next
# FROM base AS runner
# WORKDIR /app

# ENV NODE_ENV production
# # Uncomment the following line in case you want to disable telemetry during runtime.
# # ENV NEXT_TELEMETRY_DISABLED 1

# RUN addgroup --system --gid 1001 nodejs
# RUN adduser --system --uid 1001 nextjs

# COPY --from=builder /app/public ./public

# # Set the correct permission for prerender cache
# RUN mkdir .next
# RUN chown nextjs:nodejs .next

# # Automatically leverage output traces to reduce image size
# # https://nextjs.org/docs/advanced-features/output-file-tracing
# COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
# COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# USER nextjs

# EXPOSE 3001

# ENV PORT 3001
# # set hostname to localhost
# ENV HOSTNAME "0.0.0.0"

# CMD ["npm", "start"]

# FROM node:18-alpine as builder
# WORKDIR /my-space

# COPY package.json package-lock.json ./
# RUN npm ci
# COPY . .
# RUN npm run build

# FROM node:18-alpine as runner
# WORKDIR /my-space
# COPY --from=builder /my-space/package.json .
# COPY --from=builder /my-space/package-lock.json .
# COPY --from=builder /my-space/next.config.js ./
# COPY --from=builder /my-space/public ./public
# COPY --from=builder /my-space/.next/standalone ./
# COPY --from=builder /my-space/.next/static ./.next/static
# EXPOSE 3000
# ENTRYPOINT ["npm", "start"]

# Build Stage
# FROM node:16-alpine AS BUILD_IMAGE
# WORKDIR /app
# COPY package*.json ./
# RUN npm ci
# COPY . .
# RUN npm run build


# # Production Stage
# FROM node:16-alpine AS PRODUCTION_STAGE
# WORKDIR /app
# COPY --from=BUILD_IMAGE /app/package*.json ./
# COPY --from=BUILD_IMAGE /app/.next ./.next
# COPY --from=BUILD_IMAGE /app/public ./public
# COPY --from=BUILD_IMAGE /app/node_modules ./node_modules
# ENV NODE_ENV=production
# EXPOSE 3001
# CMD ["npm", "start"]
FROM node:18-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

COPY package.json package-lock.json ./
RUN  npm install --production

FROM node:18-alpine AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

ENV NEXT_TELEMETRY_DISABLED 1

RUN npm run build

FROM node:18-alpine AS runner
WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
# COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
# COPY --from=builder /app/package.json ./package.json

USER nextjs

EXPOSE 3001

ENV PORT 3001

CMD ["npm", "start"]
