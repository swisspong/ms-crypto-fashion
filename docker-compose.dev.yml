version: "3"
services:
  auth:
    container_name: auth-service
    restart: always
    build:
      context: ./ms-crypto-fashion
      dockerfile: ./apps/auth/Dockerfile
      target: development
    command: npm run start:dev auth
    ports:
      - '3000:3000'
    env_file:
      - ./ms-crypto-fashion/apps/auth/.env
    depends_on:
      - mongo1
      - mongo2
      - mongo3
      - rabbitmq
    volumes:
      - ./ms-crypto-fashion:/usr/src/app
      - /usr/src/app/node_modules
  products:
    container_name: products-service
    restart: always
    build:
      context: ./ms-crypto-fashion
      dockerfile: ./apps/products/Dockerfile
      target: development
    command: npm run start:dev products
    ports:
      - '3001:3001'
    env_file:
      - ./ms-crypto-fashion/apps/products/.env
    depends_on:
      - mongo1
      - mongo2
      - mongo3
      - rabbitmq
    volumes:
      - ./ms-crypto-fashion:/usr/src/app
      - /usr/src/app/node_modules
  carts:
    container_name: carts-service
    restart: always
    build:
      context: ./ms-crypto-fashion
      dockerfile: ./apps/carts/Dockerfile
      target: development
    command: npm run start:dev carts
    ports:
      - '3002:3002'
    env_file:
      - ./ms-crypto-fashion/apps/carts/.env
    depends_on:
      - mongo1
      - mongo2
      - mongo3
      - rabbitmq
    volumes:
      - ./ms-crypto-fashion:/usr/src/app
      - /usr/src/app/node_modules
  # mdb:
  #   image: mongo
  #   restart: always
  #   ports:
  #     - "27017:27017"
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: root
  #     MONGO_INITDB_DATABASE: ms_user,ms_product,ms_cart,ms_order,ms_payment
  #   volumes:
  #     - ./db/:/data/db


  rabbitmq:
    image: rabbitmq
    ports:
      - "5672:5672"
  mongo1:
    image: mongo:5
    container_name: mongo1
    command:
      [
        "--replSet",
        "my-replica-set",
        "--bind_ip_all",
        "--port",
        "30001"
      ]
    environment:
      MONGO_INITDB_DATABASE: ms_user,ms_product,ms_cart,ms_order,ms_payment
    volumes:
      - ./data/mongo-1:/data/db
    ports:
      - 30001:30001

    healthcheck:
      test: test $$(echo "rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo1:30001\"},{_id:1,host:\"mongo2:30002\"},{_id:2,host:\"mongo3:30003\"}]}).ok || rs.status().ok" | mongo --port 30001 --quiet) -eq 1
      interval: 10s
      start_period: 30s

  mongo2:
    image: mongo:5
    container_name: mongo2
    command:
      [
        "--replSet",
        "my-replica-set",
        "--bind_ip_all",
        "--port",
        "30002"
      ]
    environment:
      MONGO_INITDB_DATABASE: ms_user,ms_product,ms_cart,ms_order,ms_payment
    volumes:
      - ./data/mongo-2:/data/db
    ports:
      - 30002:30002

  mongo3:
    image: mongo:5
    container_name: mongo3
    command:
      [
        "--replSet",
        "my-replica-set",
        "--bind_ip_all",
        "--port",
        "30003"
      ]
    environment:
      MONGO_INITDB_DATABASE: ms_user,ms_product,ms_cart,ms_order,ms_payment
    volumes:
      - ./data/mongo-3:/data/db
    ports:
      - 30003:30003
